server:
  port: 9090
  servlet:
    context-path: /backend
spring:
  profiles:
    active: dev
  application:
    name: deliver-combine
  servlet:
    multipart:
      max-file-size: 30MB
      max-request-size: 40MB
  data:
    redis:
      port: 6379
      host: localhost
      password: 123456
      database: 0
      timeout: 5s
      lettuce:
        pool:
          max-active: 20
          max-idle: 30
          min-idle: 5
          max-wait: 10s
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    url: jdbc:mysql://localhost:3306/deliver?serverTimezone=Asia/Shanghai&zeroDateTimeBehavior=convertToNull
    username: root
    password: 123456
    driver-class-name: com.mysql.cj.jdbc.Driver
  rabbitmq:
    host: localhost
    port: 5672
    username: oszero
    password: oszero666
    virtual-host: /deliver
    # 生产者配置
    publisher-confirm-type: correlated  # 开启Confirm确认
  quartz:
    job-store-type: jdbc
    # 默认为false， 用于设定是否等待任务执行完毕后容器才会关闭。
    wait-for-jobs-to-complete-on-shutdown: false
    # 默认为false， 配置的JOB是否覆盖已经存在的JOB信息
    overwrite-existing-jobs: false
    #相关属性配置
    properties:
      org:
        quartz:
          scheduler:
            # 集群名，区分同一系统的不同实例，若使用集群功能，则每一个实例都要使用相同的名字
            instanceName: Deliver
            # 若是集群下，每个instanceId必须唯一
            instanceId: AUTO
          threadPool:
            #一般使用这个便可
            class: org.quartz.simpl.SimpleThreadPool
            #线程数量，不会动态增加
            threadCount: 20
            threadPriority: 5
            threadsInheritContextClassLoaderOfInitializingThread: true
          jobStore:
            tablePrefix: DELIVER_QRTZ_
            useProperties: false
            isClustered: true
            clusterCheckinInterval: 15000
rocketmq:
  # RocketMQ NameServer 地址，多个地址使用分号分隔
  name-server: localhost:9876
  # 生产者配置
  producer:
    # 生产者组名，用于标识一组生产者实例
    group: deliver-producer-group
mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl #开启 sql 日志
    map-underscore-to-camel-case: true
# 对称加密
aes:
  key: oszero
# 队列类型 参考 MQConstant#MQ_TYPE
mq-type: disruptor
# 服务端发送接口地址
deliver-server:
  url: http://localhost:9090/backend/open/sendMessage
# 二级缓存配置
l2cache:
  config:
    # Redisson 的yaml配置文件
    redissonYamlConfig: redisson.yaml
    # 默认缓存配置
    defaultConfig:
      # 是否存储空值，默认true，防止缓存穿透
      allowNullValues: true
      # 空值过期时间，单位秒
      nullValueExpireTimeSeconds: 30
      # 是否使用一级缓存的过期时间来替换二级缓存的过期时间，默认true，简化缓存配置
      useL1ReplaceL2ExpireTime: false
      # 缓存类型
      cacheType: COMPOSITE
      # 组合缓存配置
      composite:
        # 一级缓存类型
        l1CacheType: caffeine
        # 二级缓存类型
        l2CacheType: redis
        # 是否全部启用一级缓存，默认false
        l1AllOpen: true
      # 一级缓存
      caffeine:
        # 设置指定缓存名的创建缓存配置
        specs:
          # cacheName中含有: / * 等特殊字符，需要加 "[ ]"
          "[Cache::Deliver::MessageTemplate::]": initialCapacity=64,maximumSize=10000,refreshAfterWrite=6h,recordStats
          "[Cache::Deliver::ChannelApp::]": initialCapacity=64,maximumSize=1000,refreshAfterWrite=18h,recordStats
          "[Cache::Deliver::TemplateApp::]": initialCapacity=64,maximumSize=10000,refreshAfterWrite=6h,recordStats
      # 二级缓存
      redis:
        # 加载数据时，是否加锁，默认false
        lock: true
        # 加锁时，true调用tryLock()，false调用lock()
        tryLock: true
        # 针对cacheName维度的过期时间集合，单位ms
        expireTimeCacheNameMap:
          "[Cache::Deliver::MessageTemplate::]": 86400000
          "[Cache::Deliver::ChannelApp::]": 259200000
          "[Cache::Deliver::TemplateApp::]": 86400000
    # 缓存同步策略配置
    cacheSyncPolicy:
      # 策略类型 kafka / redis，推荐使用redis
      type: redis
      # 缓存更新时通知其他节点的topic名称
      topic: deliver-cache-sync